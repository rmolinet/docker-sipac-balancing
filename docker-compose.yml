version: "3.5"

services:
    nginx:
        image: nginx:alpine
        ports:
            - "80:80"
            - "443:443"  
        volumes:
            #Siguiente linea especificar la direccion con el codigo fuente de sipac.
            #- ../Docker-SIPAC/conf/sipac_2.4:/var/www/html/
            - ./logs/nginx/:/var/log/nginx
            - ./conf/nginx.conf:/etc/nginx/nginx.conf
            - ./conf/default-nginx.conf:/etc/nginx/conf.d/default.conf
            - ./conf/nginx.pem:/etc/ssl/certs/nginx.pem
            - ./conf/nginx.key:/etc/ssl/private/nginx.key
        depends_on:
            - apache2
        container_name: nginx_proxy
        working_dir: /etc/nginx/
        environment:
            SERVER_NAME: ${HOSTNAME}
        restart: always
        deploy:
            placement:
                constraints: [node.role == manager]
        
    php5_fpm:
        image: rmolinet/php5.6-fpm-alpine
        volumes:
            #Siguiente linea especificar la direccion con el codigo fuente de sipac.
            #- ../Docker-SIPAC/conf/sipac_2.4:/usr/local/apache2/htdocs/
            - ./conf/php.ini:/usr/local/etc/php/php.ini
        container_name: php5_fpm
        working_dir: /usr/local/apache2/htdocs/
        restart: always
        deploy:
            placement:
                constraints: [node.role == manager]
        
    apache2:
        image: httpd:alpine
        depends_on:
            - php5_fpm
        volumes:
            #Siguiente linea especificar la direccion con el codigo fuente de sipac.
            #- ../Docker-SIPAC/conf/sipac_2.4:/usr/local/apache2/htdocs/
            - ./conf/apache2/httpd.conf:/usr/local/apache2/conf/httpd.conf
            - ./conf/apache2/httpd-ssl.conf:/usr/local/apache2/conf/extra/httpd-ssl.conf
            - ./logs/apache/:/usr/local/apache2/logs/
            - ./conf/nginx.pem:/usr/local/apache2/conf/server.crt
            - ./conf/nginx.key:/usr/local/apache2/conf/server.key
        working_dir: /usr/local/apache2/htdocs/
        restart: always
        deploy:
            replicas: 4
            update_config:
                parallelism: 2
                
    postgresql:
        image: postgres:alpine
        ports:
            - "5432:5432"   
        volumes:
            #- ./conf/postgresql.sh:/usr/local/bin/postgresql.sh
            - data_postgresql:/var/lib/postgresql/data
            - binarios_postgres:/usr/local/bin    
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
        container_name: postgresql    
        #entrypoint:
            #- docker-entrypoint.sh
        #    - postgresql.sh
        restart: always 

    pgadmin4:
        image: rmolinet/sipac-pgadmin4:4.3
        ports:
            - "5050:5050"
        depends_on:
            - postgresql
        volumes:
            - binarios_postgres:${binary_path:-/usr/local/bin/postgres_binaries}
            - ./conf/pgadmin4_storage/:/var/lib/pgadmin/storage/
            #- ./conf/pgadmin4.db:/var/lib/pgadmin/pgadmin4.db
        environment:
            DEFAULT_USER: postgres
            DEFAULT_PASSWORD: postgres
            binary_path: ${binary_path:-/usr/local/bin/postgres_binaries}
        container_name: pgadmin4    
        restart: always
    
    visualizer:
        image: dockersamples/visualizer
        ports:
            - "8080:8080"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        container_name: visualizer
        deploy:
            placement:
                constraints: [node.role == manager]

volumes:
    data_postgresql:
    binarios_postgres:
